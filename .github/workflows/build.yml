name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    name: Build and test on ${{ matrix.os }} for Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest numpy

      - name: Developer installation
        run: |
          maturin develop --release

      - name: Test installation
        run: |
          python -c "from reebundle.rust import find_connect_disconnect_events; print('Rust extension imported successfully')"

      # Optional: Build wheels for release if needed
      - name: Build wheels (for releases)
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          maturin build --release

      - name: Upload wheels (for releases)
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}
          path: target/wheels

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [build]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin twine

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: List wheels
        run: |
          find dist -type f -name "*.whl" | sort

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload --skip-existing dist/**/*.whl